<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

   <!-- c3p0连接池 -->
   <bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
	    <property name="driverClass" value="oracle.jdbc.driver.OracleDriver"/>
	    <property name="jdbcUrl" value="jdbc:oracle:thin:@MHRHJVPD0ULR2N1:1521:orc1"/>
	    <property name="user" value="tq"/>
	    <property name="password" value="123"/>
	</bean>
	
	<!-- session工厂 -->
     <bean id="mySessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <property name="mappingLocations">
        	<value>classpath:entity/*.hbm.xml</value>
        </property>
       	<property name="hibernateProperties">
       		<props>
       			<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
        		<prop key="hibernate.hbm2ddl.auto">update</prop>
        		<prop key="hibernate.format_sql">true</prop>
        		<prop key="hibernate.c3p0.min_size">5</prop>
        		<prop key="hibernate.c3p0.max_size">10</prop>
        		<prop key="hibernate.c3p0.timeout">1800</prop>
        		<prop key="hibernate.c3p0.max_statements">50</prop>
        		<!-- <prop key="current_session_context_class">thread</prop> -->
        		<prop key="hibernate.cache.provider_class">org.hibernate.cache.internal.NoCacheProvider</prop>
       		</props>
       	</property>
    </bean>
    
    <!-- 数据访问层 -->
    <bean id="baseDAO" class="dao.BaseDAO" abstract="true">
    	<property name="sessionFactory" ref="mySessionFactory"/>
    </bean>
    <bean id="userInfoDAO" class="dao.UserInfoDAO" parent="baseDAO">
    </bean>
    
    <!-- 业务层 -->
    <!-- this is the service object that we want to make transactional -->
    <bean id="userService" class="service.UserService">
        <property name="userInfoDAO" ref="userInfoDAO"/>
    </bean>
    
    <!-- 事务管理 -->
    <!-- similarly, don't forget the PlatformTransactionManager -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    
    <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" read-only="true"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!-- ensure that the above transactional advice runs for any execution
        of an operation defined by the FooService interface -->
    <aop:config>
        <aop:pointcut id="allServiceMethod" expression="execution(* service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allServiceMethod"/>
    </aop:config>

	<!-- 控制器层 -->
    <bean id="userAction" class="web.UserAction" scope="prototype">
        <property name="userService" ref="userService"/>
    </bean>

</beans>